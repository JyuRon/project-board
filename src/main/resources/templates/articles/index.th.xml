<?xml version="1.0"?>
<thlogic>
    <!--
        header.html 의 header 요소를 찾아라
        element 뿐만 아니라 id, class 탬색 또한 가능
        ~{header :: .header}
        ~{header :: #header}

        ~{} 문법 또한 header :: header 로 생략 가능, 예시의 경우 footer
    -->
    <attr sel="#header" th:replace="~{header :: header}" />
    <attr sel="#footer" th:replace="footer :: footer" />
    <!-- <arrt sel="header"></arrt> -->



    <attr sel="main" th:object=" ${articles}">
        <!-- form 설정 -->
        <attr sel="#search-form" th:action="@{/articles}" th:method="get" />

        <!-- 검색 기능-->
        <!--
             param의 경우 thymeleaf에서 제공하는 변수로 Request Param 값을 참조 할 수 있게 한다.
             https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#variables
             Web context namespaces for request/session attributes, etc.

             param.searchType.toString == searchType.name
             param의 경우 Map<String,Object> 형태로 제공하며 enum 을 보장하지 않는다.
             이러한 이유로 비교 로직의 경우 searchType의 경우 toString 메소드를 사용하는 과정이 필요
        -->
        <attr sel="#search-type" th:remove="all-but-first">
            <attr sel="option[0]"
                  th:each="searchType : ${searchTypes}"
                  th:value="${searchType.name}"
                  th:text="${searchType.description}"
                  th:selected="${param.searchType != null && (param.searchType.toString == searchType.name)}"
            />
        </attr>
        <attr sel="#search-value" th:value="${param.searchValue}" />

        <attr sel="#article-table">
            <!-- 테이블 헤더 클릭시 정렬 기능 -->
            <!--
                   th:href () : query params 로 치환되서 들어가게 된다.
                   ${articles.number} 가 가능한 이유?? return Page<ArticleResponse>인데 이때 Page 가 상속받은 인터페이스에 number 가 존재!!
                   *{sort.getOrderFor('title').direction.name} ?? : 자바 메소드를 그대로 사용 가능
            -->
            <attr sel="thead/tr">
                <attr sel="th.title/a" th:text="'제목'" th:href="@{/articles(
                    page=${articles.number},
                    sort='title' + (*{sort.getOrderFor('title')} != null ? (*{sort.getOrderFor('title').direction.name} != 'DESC' ? ',desc':'') :''),
                    searchType=${param.searchType},
                    searchValue=${param.searchValue}
            )}" />
                <attr sel="th.hashtag/a" th:text="'해시태그'" th:href="@{/articles(
                    page=${articles.number},
                    sort='hashtags' + (*{sort.getOrderFor('hashtags')} != null ? (*{sort.getOrderFor('hashtags').direction.name} != 'DESC' ? ',desc':'') :''),
                    searchType=${param.searchType},
                    searchValue=${param.searchValue}
            )}" />
                <!--
                    실제 dto는 ArticleResponse.nickname 이지만 게시글 조회의 경우
                    service layer 에서 이루어지기 때문에 UserAccount.userId 사용
                -->
                <attr sel="th.user-id/a" th:text="'작성자'" th:href="@{/articles(
                    page=${articles.number},
                    sort='userAccount.userId' + (*{sort.getOrderFor('userAccount.userId')} != null ? (*{sort.getOrderFor('userAccount.userId').direction.name} != 'DESC' ? ',desc':'') :''),
                    searchType=${param.searchType},
                    searchValue=${param.searchValue}
            )}" />
                <attr sel="th.created-at/a" th:text="'작성일'" th:href="@{/articles(
                    page=${articles.number},
                    sort='createdAt' + (*{sort.getOrderFor('createdAt')} != null ? (*{sort.getOrderFor('createdAt').direction.name} != 'DESC' ? ',desc':'') :''),
                    searchType=${param.searchType},
                    searchValue=${param.searchValue}
            )}" />
            </attr>

            <!--
                게시글 정보 출력
                tbody 내에 th 태그를 모드 지운다, 단 첫번째만 제외하고
                https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#using-theach
            -->
            <attr sel="tbody" th:remove="all-but-first">
                <!-- th:each 반복문 -->
                <attr sel="tr[0]" th:each="article : ${articles}">
                    <attr sel="td.title/a" th:text="${article.title}" th:href="@{'/articles/' + ${article.id}}" />
                    <attr sel="td.hashtag/span" th:each="hashtag : ${article.hashtags}">
                        <attr sel="a"
                              th:text="'#' + ${hashtag}"
                              th:href="@{/articles(searchType=${searchTypeHashtag},searchValue=${hashtag})}"
                        />
                    </attr>
                    <attr sel="td.user-id" th:text="${article.nickname}" />
                    <attr sel="td.created-at/time" th:datetime="${article.createdAt}" th:text="${#temporals.format(article.createdAt, 'yyyy-MM-dd')}" />
                </attr>
            </attr>
        </attr>

        <!-- 글쓰기 버튼 동작 -->
        <attr sel="#write-article" sec:authorize="isAuthenticated()" th:href="@{/articles/form}" />

        <!-- 페이징 처리 -->
        <attr sel="#pagination">
            <!--
                th:href () : query params 로 치환되서 들어가게 된다.
                ${articles.number} 가 가능한 이유?? return Page<ArticleResponse>인데 이때 Page 가 상속받은 인터페이스에 number 가 존재!!
            -->
            <attr sel="li[0]/a"
                  th:text="'previous'"
                  th:href="@{/articles(page=${articles.number - 1}, searchType=${param.searchType}, searchValue=${param.searchValue})}"
                  th:class="'page-link' + (${articles.number} <= 0 ? ' disabled' : '')"
            />
            <attr sel="li[1]" th:class="page-item" th:each="pageNumber : ${paginationBarNumbers}">
                <attr sel="a   "
                      th:text="${pageNumber + 1}"
                      th:href="@{/articles(page=${pageNumber}, searchType=${param.searchType}, searchValue=${param.searchValue})}"
                      th:class="'page-link' + (${pageNumber} == ${articles.number} ? ' disabled' : '')"
                />
            </attr>
            <attr sel="li[2]/a"
                  th:text="'next'"
                  th:href="@{/articles(page=${articles.number + 1}, searchType=${param.searchType}, searchValue=${param.searchValue})}"
                  th:class="'page-link' + (${articles.number} >= ${articles.totalPages - 1} ? ' disabled' : '')"
            />
        </attr>
    </attr>


</thlogic>