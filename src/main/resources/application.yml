debug: false
management.endpoints.web.exposure.include: "*"

logging:
    level:
        com.example.projectboard: debug
        org.springframework.web.servlet: debug
        org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
    datasource:
        # mysql
#        url: jdbc:mysql://localhost:3306/board
#        username: jyuka
#        password: 1234
#        driver-class-name: com.mysql.cj.jdbc.Driver

        # postgres
        url: jdbc:postgresql://localhost:5432/board
        username: jyuka
        password: 1234

        # h2-db
#        url: jdbc:h2:mem:testdb
#        username: sa
#        driver-class-name: org.h2.Driver
    jpa:
        defer-datasource-initialization: true
        hibernate.ddl-auto: create
        show-sql: true
        properties:
            hibernate.format_sql: true
            hibernate.default_batch_fetch_size: 100
        # OSIV 끔
        # 참고 URL : https://ykh6242.tistory.com/entry/JPA-OSIVOpen-Session-In-View%EC%99%80-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94
        open-in-view: false
    h2.console.enabled: false
    sql.init.mode: always

    # Rest Repository 설정
    # 참고 url : https://supawer0728.github.io/2018/03/20/spring-data-rest/
    # https://docs.spring.io/spring-data/rest/docs/current/reference/html/
    data.rest:
        # http://127.0.0.1:8080/api 입력시 HAL Explorer
        base-path: /api
        # default: 모든 public repository. @RestResource의 exported가 false인 경우 제외
        # all: 가시성, annotation과 상관 없이 모든 repository 노출
        # annoation: exported가 true이며 @RepositoryRestResource, @RestResource가 달린 자원들을 노출
        # visibility: public interface만 노출
        detection-strategy: annotated
    thymeleaf3:
        decoupled-logic: true
    # OAuth2 설정
    security:
        oauth2:
            client:
                registration:
                    kakao:
                        client-id: ${KAKAO_OAUTH_CLIENT_ID}
                        client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
                        authorization-grant-type: authorization_code # https://oauth.net/2/grant-types/authorization-code/
                        redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
                        client-authentication-method: POST
                provider:
                    kakao:
                        authorization-uri: https://kauth.kakao.com/oauth/authorize # 인가 요청에 필요한 url(로그인 시도)
                        token-uri: https://kauth.kakao.com/oauth/token # 토큰 발급에 필요한 url(로그인 성공 이후 사용자 정보 호출을 위한 access token 발급 요청)
                        user-info-uri: https://kapi.kakao.com/v2/user/me # 사용자 정보를 호출할때 필요한 url(OAuth2UserService 에서 사용)
                        user-name-attribute: id # 사용자 정보를 받았을 경우 response 에 있는 키워드중 식별자로 사용할 것을 지정


---
spring:
    config:
        activate:
            on-profile: testdb
#    datasource:
#        url: jdbc:h2:mem:board;mode=mysql
#        driver-class-name: org.h2.Driver
#    sql:
#        init:
#            mode: always
#
#    # 아레 조건에 대한 설정을 yml에서 관리
#    # @ActiveProfiles("testdb")
#    # @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
#    test.database.replace: none

---
spring:
    config.activate.on-profile: heroku
    datasource:
        url: ${JAWSDB_URL}
        driver-class-name: com.mysql.cj.jdbc.Driver
    jpa.hibernate.ddl-auto: create
    sql.init.mode: always